{"version":3,"sources":["components/data.js","components/ProjectList.js","components/Toolbar.js","components/Portfolio.js","App.js","serviceWorker.js","index.js"],"names":["img","category","ProjectList","props","className","projects","map","item","index","key","src","alt","Toolbar","filters","selected","onClick","onSelectFilter","types","all","websites","flayers","business_cards","Portfolio","state","active","filter","setState","filterProjects","this","project","Object","values","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQAAe,GACb,CACEA,IACE,wGACFC,SAAU,kBAEZ,CACED,IACE,wGACFC,SAAU,YAEZ,CACED,IACE,6GACFC,SAAU,YAEZ,CACED,IACE,gHACFC,SAAU,YAEZ,CACED,IACE,iHACFC,SAAU,kBAEZ,CACED,IACE,iHACFC,SAAU,YAEZ,CACED,IACE,wGACFC,SAAU,YAEZ,CACED,IACE,iHACFC,SAAU,kBAEZ,CACED,IACE,mHACFC,SAAU,YAEZ,CACED,IACE,mHACFC,SAAU,WAEZ,CACED,IACE,sHACFC,SAAU,YAEZ,CACED,IACE,wGACFC,SAAU,kBAEZ,CACED,IACE,qHACFC,SAAU,YAEZ,CACED,IACE,6GACFC,SAAU,YAEZ,CACED,IACE,iHACFC,SAAU,kBAEZ,CACED,IACE,uHACFC,SAAU,YAEZ,CACED,IACE,mHACFC,SAAU,YC5DCC,EArBK,SAACC,GACnB,OACE,yBAAKC,UAAU,QACZD,EAAME,SAASC,KAAI,SAACC,EAAMC,GAAP,OAClB,yBAAKC,IAAKD,EAAOJ,UAAU,SACzB,yBAAKM,IAAKH,EAAKP,IAAKW,IAAKJ,EAAKP,YCUzBY,EAhBC,SAACT,GACf,OACE,oCACGA,EAAMU,QAAQP,KAAI,SAACC,EAAMC,GAAP,OACjB,4BACEC,IAAKD,EACLJ,UAAYD,EAAMW,WAAaP,EAAQ,eAAiB,SACxDQ,QAAS,kBAAMZ,EAAMa,eAAeT,KAEnCA,QCNLU,EAAQ,CACZC,IAAK,MACLC,SAAU,WACVC,QAAS,UACTC,eAAgB,kBAiCHC,E,4MA7BbC,MAAQ,CACNC,OAAQP,EAAMC,K,EAGhBF,eAAiB,SAACS,GAChB,EAAKC,SAAS,CAAEF,OAAQC,K,uDAGhB,IAAD,OACDE,EACJC,KAAKL,MAAMC,SAAWP,EAAMC,IACxBb,EACAA,EAASoB,QACP,SAACI,GAAD,OAAaA,EAAQ5B,WAAa,EAAKsB,MAAMC,UAGrD,OACE,6BACE,kBAAC,EAAD,CACEX,QAASiB,OAAOC,OAAOd,GACvBH,SAAUc,KAAKL,MAAMC,OACrBR,eAAgBY,KAAKZ,iBAEvB,kBAAC,EAAD,CAAaX,SAAUsB,S,GAxBPK,aCCTC,MARf,WACE,OACE,yBAAK7B,UAAU,aACb,kBAAC,EAAD,QCIc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e788b92a.chunk.js","sourcesContent":["export default [\n  {\n    img:\n      \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/mon.jpg\",\n    category: \"Business Cards\",\n  },\n  {\n    img:\n      \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/200.jpg\",\n    category: \"Websites\",\n  },\n  {\n    img:\n      \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/emi_haze.jpg\",\n    category: \"Websites\",\n  },\n  {\n    img:\n      \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/codystretch.jpg\",\n    category: \"Websites\",\n  },\n  {\n    img:\n      \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/Triangle_003.jpg\",\n    category: \"Business Cards\",\n  },\n  {\n    img:\n      \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/place200x290.png\",\n    category: \"Websites\",\n  },\n  {\n    img:\n      \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/200.jpg\",\n    category: \"Websites\",\n  },\n  {\n    img:\n      \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/transmission.jpg\",\n    category: \"Business Cards\",\n  },\n  {\n    img:\n      \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/place200x290_1.png\",\n    category: \"Websites\",\n  },\n  {\n    img:\n      \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/place200x290_2.png\",\n    category: \"Flayers\",\n  },\n  {\n    img:\n      \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/the_ninetys_brand.jpg\",\n    category: \"Websites\",\n  },\n  {\n    img:\n      \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/dia.jpg\",\n    category: \"Business Cards\",\n  },\n  {\n    img:\n      \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/Triangle_350x197.jpg\",\n    category: \"Websites\",\n  },\n  {\n    img:\n      \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/emi_haze.jpg\",\n    category: \"Websites\",\n  },\n  {\n    img:\n      \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/transmission.jpg\",\n    category: \"Business Cards\",\n  },\n  {\n    img:\n      \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/Triangle_350x197_1.jpg\",\n    category: \"Websites\",\n  },\n  {\n    img:\n      \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/place200x290_3.png\",\n    category: \"Flayers\",\n  },\n];\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ProjectList = (props) => {\n  return (\n    <div className=\"list\">\n      {props.projects.map((item, index) => (\n        <div key={index} className=\"image\">\n          <img src={item.img} alt={item.img}/>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nProjectList.propTypes = {\n  projects: PropTypes.arrayOf(\n    PropTypes.shape({\n      img: PropTypes.string.isRequired,\n      category: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ProjectList;\n","import React from \"react\";\n\nconst Toolbar = (props) => {\n  return (\n    <>\n      {props.filters.map((item, index) => (\n        <button\n          key={index}\n          className={(props.selected === item) ? \"btn-selected\" : \"button\"}\n          onClick={() => props.onSelectFilter(item)}\n        >\n          {item}\n        </button>\n      ))}\n    </>\n  );\n};\n\nexport default Toolbar;\n","import React, { Component } from \"react\";\nimport projects from \"./data\";\nimport ProjectList from \"./ProjectList\";\nimport Toolbar from \"./Toolbar\";\n\nconst types = {\n  all: \"All\",\n  websites: \"Websites\",\n  flayers: \"Flayers\",\n  business_cards: \"Business Cards\",\n};\n\nclass Portfolio extends Component {\n  state = {\n    active: types.all,\n  };\n\n  onSelectFilter = (filter) => {\n    this.setState({ active: filter });\n  };\n\n  render() {\n    const filterProjects =\n      this.state.active === types.all\n        ? projects\n        : projects.filter (\n            (project) => project.category === this.state.active\n          );\n\n    return (\n      <div>\n        <Toolbar\n          filters={Object.values(types)}\n          selected={this.state.active}\n          onSelectFilter={this.onSelectFilter}\n        />\n        <ProjectList projects={filterProjects} />\n      </div>\n    );\n  }\n}\n\nexport default Portfolio;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Portfolio from \"./components/Portfolio\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Portfolio />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}